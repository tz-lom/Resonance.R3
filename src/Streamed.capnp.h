// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Streamed.capnp

#ifndef CAPNP_INCLUDED_85e38f4662b50c44_
#define CAPNP_INCLUDED_85e38f4662b50c44_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(85bfb87909cdbeca);
CAPNP_DECLARE_SCHEMA(8d57347cddcd82b4);
CAPNP_DECLARE_SCHEMA(d53a5a5d4436fde9);
CAPNP_DECLARE_SCHEMA(a73ecb5b2a23490e);
CAPNP_DECLARE_SCHEMA(88f5fc35d5e51617);
CAPNP_DECLARE_SCHEMA(aa2427365651a9b7);
CAPNP_DECLARE_SCHEMA(fa9e4b9ffa326880);
CAPNP_DECLARE_SCHEMA(8976f60cd9ea59b0);

}  // namespace schemas
}  // namespace capnp

namespace Resonance {

struct DataBlockInt32 {
  DataBlockInt32() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85bfb87909cdbeca, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DataBlockInt64 {
  DataBlockInt64() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8d57347cddcd82b4, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DataBlockDouble {
  DataBlockDouble() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d53a5a5d4436fde9, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct StreamDescription {
  StreamDescription() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a73ecb5b2a23490e, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SystemEvent {
  SystemEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    DESCRIPTION,
    APPLY_PARAMETERS,
    DESCRIBE_PARAMETERS,
    PARAMETERS,
    DESCRIBE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88f5fc35d5e51617, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct StreamedBlock {
  StreamedBlock() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INT32,
    INT64,
    DOUBLE,
    MESSAGE,
    BINARY,
    EVENT_BUS,
    ERROR,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa2427365651a9b7, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct AtomicHeader {
  AtomicHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa9e4b9ffa326880, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct StreamedHeader {
  StreamedHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    DOUBLE,
    INT32,
    INT64,
    MESSAGE,
    BINARY,
    EVENT_BUS,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8976f60cd9ea59b0, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class DataBlockInt32::Reader {
public:
  typedef DataBlockInt32 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSamples() const;

  inline bool hasData() const;
  inline  ::capnp::List< ::uint32_t>::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DataBlockInt32::Builder {
public:
  typedef DataBlockInt32 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSamples();
  inline void setSamples( ::uint32_t value);

  inline bool hasData();
  inline  ::capnp::List< ::uint32_t>::Builder getData();
  inline void setData( ::capnp::List< ::uint32_t>::Reader value);
  inline void setData(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DataBlockInt32::Pipeline {
public:
  typedef DataBlockInt32 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DataBlockInt64::Reader {
public:
  typedef DataBlockInt64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSamples() const;

  inline bool hasData() const;
  inline  ::capnp::List< ::uint64_t>::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DataBlockInt64::Builder {
public:
  typedef DataBlockInt64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSamples();
  inline void setSamples( ::uint32_t value);

  inline bool hasData();
  inline  ::capnp::List< ::uint64_t>::Builder getData();
  inline void setData( ::capnp::List< ::uint64_t>::Reader value);
  inline void setData(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DataBlockInt64::Pipeline {
public:
  typedef DataBlockInt64 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DataBlockDouble::Reader {
public:
  typedef DataBlockDouble Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSamples() const;

  inline bool hasData() const;
  inline  ::capnp::List<double>::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DataBlockDouble::Builder {
public:
  typedef DataBlockDouble Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSamples();
  inline void setSamples( ::uint32_t value);

  inline bool hasData();
  inline  ::capnp::List<double>::Builder getData();
  inline void setData( ::capnp::List<double>::Reader value);
  inline void setData(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DataBlockDouble::Pipeline {
public:
  typedef DataBlockDouble Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StreamDescription::Reader {
public:
  typedef StreamDescription Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint32_t getPort() const;

  inline bool hasType() const;
  inline  ::Resonance::StreamedHeader::Reader getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StreamDescription::Builder {
public:
  typedef StreamDescription Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint32_t getPort();
  inline void setPort( ::uint32_t value);

  inline bool hasType();
  inline  ::Resonance::StreamedHeader::Builder getType();
  inline void setType( ::Resonance::StreamedHeader::Reader value);
  inline  ::Resonance::StreamedHeader::Builder initType();
  inline void adoptType(::capnp::Orphan< ::Resonance::StreamedHeader>&& value);
  inline ::capnp::Orphan< ::Resonance::StreamedHeader> disownType();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StreamDescription::Pipeline {
public:
  typedef StreamDescription Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Resonance::StreamedHeader::Pipeline getType();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SystemEvent::Reader {
public:
  typedef SystemEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint64_t getSended() const;

  inline  ::uint64_t getReceived() const;

  inline bool hasTo() const;
  inline  ::capnp::Text::Reader getTo() const;

  inline bool hasFrom() const;
  inline  ::capnp::Text::Reader getFrom() const;

  inline bool isDescription() const;
  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

  inline bool isApplyParameters() const;
  inline bool hasApplyParameters() const;
  inline  ::capnp::Text::Reader getApplyParameters() const;

  inline bool isDescribeParameters() const;
  inline  ::capnp::Void getDescribeParameters() const;

  inline bool isParameters() const;
  inline bool hasParameters() const;
  inline  ::capnp::Text::Reader getParameters() const;

  inline bool isDescribe() const;
  inline  ::capnp::Void getDescribe() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SystemEvent::Builder {
public:
  typedef SystemEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint64_t getSended();
  inline void setSended( ::uint64_t value);

  inline  ::uint64_t getReceived();
  inline void setReceived( ::uint64_t value);

  inline bool hasTo();
  inline  ::capnp::Text::Builder getTo();
  inline void setTo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTo(unsigned int size);
  inline void adoptTo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTo();

  inline bool hasFrom();
  inline  ::capnp::Text::Builder getFrom();
  inline void setFrom( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFrom(unsigned int size);
  inline void adoptFrom(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFrom();

  inline bool isDescription();
  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

  inline bool isApplyParameters();
  inline bool hasApplyParameters();
  inline  ::capnp::Text::Builder getApplyParameters();
  inline void setApplyParameters( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initApplyParameters(unsigned int size);
  inline void adoptApplyParameters(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownApplyParameters();

  inline bool isDescribeParameters();
  inline  ::capnp::Void getDescribeParameters();
  inline void setDescribeParameters( ::capnp::Void value = ::capnp::VOID);

  inline bool isParameters();
  inline bool hasParameters();
  inline  ::capnp::Text::Builder getParameters();
  inline void setParameters( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownParameters();

  inline bool isDescribe();
  inline  ::capnp::Void getDescribe();
  inline void setDescribe( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SystemEvent::Pipeline {
public:
  typedef SystemEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StreamedBlock::Reader {
public:
  typedef StreamedBlock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint64_t getCreated() const;

  inline  ::uint64_t getReceived() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline  ::Resonance::DataBlockInt32::Reader getInt32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline  ::Resonance::DataBlockInt64::Reader getInt64() const;

  inline bool isDouble() const;
  inline bool hasDouble() const;
  inline  ::Resonance::DataBlockDouble::Reader getDouble() const;

  inline bool isMessage() const;
  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

  inline bool isBinary() const;
  inline bool hasBinary() const;
  inline  ::capnp::Data::Reader getBinary() const;

  inline bool isEventBus() const;
  inline bool hasEventBus() const;
  inline  ::Resonance::SystemEvent::Reader getEventBus() const;

  inline bool isError() const;
  inline  ::capnp::Void getError() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StreamedBlock::Builder {
public:
  typedef StreamedBlock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint64_t getCreated();
  inline void setCreated( ::uint64_t value);

  inline  ::uint64_t getReceived();
  inline void setReceived( ::uint64_t value);

  inline bool isInt32();
  inline bool hasInt32();
  inline  ::Resonance::DataBlockInt32::Builder getInt32();
  inline void setInt32( ::Resonance::DataBlockInt32::Reader value);
  inline  ::Resonance::DataBlockInt32::Builder initInt32();
  inline void adoptInt32(::capnp::Orphan< ::Resonance::DataBlockInt32>&& value);
  inline ::capnp::Orphan< ::Resonance::DataBlockInt32> disownInt32();

  inline bool isInt64();
  inline bool hasInt64();
  inline  ::Resonance::DataBlockInt64::Builder getInt64();
  inline void setInt64( ::Resonance::DataBlockInt64::Reader value);
  inline  ::Resonance::DataBlockInt64::Builder initInt64();
  inline void adoptInt64(::capnp::Orphan< ::Resonance::DataBlockInt64>&& value);
  inline ::capnp::Orphan< ::Resonance::DataBlockInt64> disownInt64();

  inline bool isDouble();
  inline bool hasDouble();
  inline  ::Resonance::DataBlockDouble::Builder getDouble();
  inline void setDouble( ::Resonance::DataBlockDouble::Reader value);
  inline  ::Resonance::DataBlockDouble::Builder initDouble();
  inline void adoptDouble(::capnp::Orphan< ::Resonance::DataBlockDouble>&& value);
  inline ::capnp::Orphan< ::Resonance::DataBlockDouble> disownDouble();

  inline bool isMessage();
  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

  inline bool isBinary();
  inline bool hasBinary();
  inline  ::capnp::Data::Builder getBinary();
  inline void setBinary( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initBinary(unsigned int size);
  inline void adoptBinary(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownBinary();

  inline bool isEventBus();
  inline bool hasEventBus();
  inline  ::Resonance::SystemEvent::Builder getEventBus();
  inline void setEventBus( ::Resonance::SystemEvent::Reader value);
  inline  ::Resonance::SystemEvent::Builder initEventBus();
  inline void adoptEventBus(::capnp::Orphan< ::Resonance::SystemEvent>&& value);
  inline ::capnp::Orphan< ::Resonance::SystemEvent> disownEventBus();

  inline bool isError();
  inline  ::capnp::Void getError();
  inline void setError( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StreamedBlock::Pipeline {
public:
  typedef StreamedBlock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AtomicHeader::Reader {
public:
  typedef AtomicHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getChannels() const;

  inline double getSamplingRate() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AtomicHeader::Builder {
public:
  typedef AtomicHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getChannels();
  inline void setChannels( ::uint32_t value);

  inline double getSamplingRate();
  inline void setSamplingRate(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AtomicHeader::Pipeline {
public:
  typedef AtomicHeader Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StreamedHeader::Reader {
public:
  typedef StreamedHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isDouble() const;
  inline bool hasDouble() const;
  inline  ::Resonance::AtomicHeader::Reader getDouble() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline  ::Resonance::AtomicHeader::Reader getInt32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline  ::Resonance::AtomicHeader::Reader getInt64() const;

  inline bool isMessage() const;
  inline  ::capnp::Void getMessage() const;

  inline bool isBinary() const;
  inline  ::capnp::Void getBinary() const;

  inline bool isEventBus() const;
  inline  ::capnp::Void getEventBus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StreamedHeader::Builder {
public:
  typedef StreamedHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isDouble();
  inline bool hasDouble();
  inline  ::Resonance::AtomicHeader::Builder getDouble();
  inline void setDouble( ::Resonance::AtomicHeader::Reader value);
  inline  ::Resonance::AtomicHeader::Builder initDouble();
  inline void adoptDouble(::capnp::Orphan< ::Resonance::AtomicHeader>&& value);
  inline ::capnp::Orphan< ::Resonance::AtomicHeader> disownDouble();

  inline bool isInt32();
  inline bool hasInt32();
  inline  ::Resonance::AtomicHeader::Builder getInt32();
  inline void setInt32( ::Resonance::AtomicHeader::Reader value);
  inline  ::Resonance::AtomicHeader::Builder initInt32();
  inline void adoptInt32(::capnp::Orphan< ::Resonance::AtomicHeader>&& value);
  inline ::capnp::Orphan< ::Resonance::AtomicHeader> disownInt32();

  inline bool isInt64();
  inline bool hasInt64();
  inline  ::Resonance::AtomicHeader::Builder getInt64();
  inline void setInt64( ::Resonance::AtomicHeader::Reader value);
  inline  ::Resonance::AtomicHeader::Builder initInt64();
  inline void adoptInt64(::capnp::Orphan< ::Resonance::AtomicHeader>&& value);
  inline ::capnp::Orphan< ::Resonance::AtomicHeader> disownInt64();

  inline bool isMessage();
  inline  ::capnp::Void getMessage();
  inline void setMessage( ::capnp::Void value = ::capnp::VOID);

  inline bool isBinary();
  inline  ::capnp::Void getBinary();
  inline void setBinary( ::capnp::Void value = ::capnp::VOID);

  inline bool isEventBus();
  inline  ::capnp::Void getEventBus();
  inline void setEventBus( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StreamedHeader::Pipeline {
public:
  typedef StreamedHeader Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t DataBlockInt32::Reader::getSamples() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t DataBlockInt32::Builder::getSamples() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DataBlockInt32::Builder::setSamples( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DataBlockInt32::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DataBlockInt32::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader DataBlockInt32::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder DataBlockInt32::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DataBlockInt32::Builder::setData( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void DataBlockInt32::Builder::setData(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder DataBlockInt32::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DataBlockInt32::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> DataBlockInt32::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t DataBlockInt64::Reader::getSamples() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t DataBlockInt64::Builder::getSamples() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DataBlockInt64::Builder::setSamples( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DataBlockInt64::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DataBlockInt64::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader DataBlockInt64::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder DataBlockInt64::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DataBlockInt64::Builder::setData( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void DataBlockInt64::Builder::setData(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder DataBlockInt64::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DataBlockInt64::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> DataBlockInt64::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t DataBlockDouble::Reader::getSamples() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t DataBlockDouble::Builder::getSamples() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DataBlockDouble::Builder::setSamples( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DataBlockDouble::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DataBlockDouble::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader DataBlockDouble::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder DataBlockDouble::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DataBlockDouble::Builder::setData( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void DataBlockDouble::Builder::setData(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder DataBlockDouble::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DataBlockDouble::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> DataBlockDouble::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamDescription::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamDescription::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StreamDescription::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StreamDescription::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamDescription::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StreamDescription::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void StreamDescription::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StreamDescription::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t StreamDescription::Reader::getPort() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t StreamDescription::Builder::getPort() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void StreamDescription::Builder::setPort( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool StreamDescription::Reader::hasType() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool StreamDescription::Builder::hasType() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::StreamedHeader::Reader StreamDescription::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::Resonance::StreamedHeader>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Resonance::StreamedHeader::Builder StreamDescription::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::Resonance::StreamedHeader>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Resonance::StreamedHeader::Pipeline StreamDescription::Pipeline::getType() {
  return  ::Resonance::StreamedHeader::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void StreamDescription::Builder::setType( ::Resonance::StreamedHeader::Reader value) {
  ::capnp::_::PointerHelpers< ::Resonance::StreamedHeader>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Resonance::StreamedHeader::Builder StreamDescription::Builder::initType() {
  return ::capnp::_::PointerHelpers< ::Resonance::StreamedHeader>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void StreamDescription::Builder::adoptType(
    ::capnp::Orphan< ::Resonance::StreamedHeader>&& value) {
  ::capnp::_::PointerHelpers< ::Resonance::StreamedHeader>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::StreamedHeader> StreamDescription::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::Resonance::StreamedHeader>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline SystemEvent::Which SystemEvent::Reader::which() const {
  return _reader.getDataField<Which>(8 * ::capnp::ELEMENTS);
}
inline SystemEvent::Which SystemEvent::Builder::which() {
  return _builder.getDataField<Which>(8 * ::capnp::ELEMENTS);
}

inline  ::uint64_t SystemEvent::Reader::getSended() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t SystemEvent::Builder::getSended() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void SystemEvent::Builder::setSended( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SystemEvent::Reader::getReceived() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t SystemEvent::Builder::getReceived() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void SystemEvent::Builder::setReceived( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool SystemEvent::Reader::hasTo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SystemEvent::Builder::hasTo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SystemEvent::Reader::getTo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SystemEvent::Builder::getTo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SystemEvent::Builder::setTo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SystemEvent::Builder::initTo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SystemEvent::Builder::adoptTo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SystemEvent::Builder::disownTo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SystemEvent::Reader::hasFrom() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SystemEvent::Builder::hasFrom() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SystemEvent::Reader::getFrom() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SystemEvent::Builder::getFrom() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SystemEvent::Builder::setFrom( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SystemEvent::Builder::initFrom(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SystemEvent::Builder::adoptFrom(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SystemEvent::Builder::disownFrom() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SystemEvent::Reader::isDescription() const {
  return which() == SystemEvent::DESCRIPTION;
}
inline bool SystemEvent::Builder::isDescription() {
  return which() == SystemEvent::DESCRIPTION;
}
inline bool SystemEvent::Reader::hasDescription() const {
  if (which() != SystemEvent::DESCRIPTION) return false;
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SystemEvent::Builder::hasDescription() {
  if (which() != SystemEvent::DESCRIPTION) return false;
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SystemEvent::Reader::getDescription() const {
  KJ_IREQUIRE(which() == SystemEvent::DESCRIPTION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SystemEvent::Builder::getDescription() {
  KJ_IREQUIRE(which() == SystemEvent::DESCRIPTION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SystemEvent::Builder::setDescription( ::capnp::Text::Reader value) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::DESCRIPTION);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SystemEvent::Builder::initDescription(unsigned int size) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::DESCRIPTION);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void SystemEvent::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::DESCRIPTION);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SystemEvent::Builder::disownDescription() {
  KJ_IREQUIRE(which() == SystemEvent::DESCRIPTION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool SystemEvent::Reader::isApplyParameters() const {
  return which() == SystemEvent::APPLY_PARAMETERS;
}
inline bool SystemEvent::Builder::isApplyParameters() {
  return which() == SystemEvent::APPLY_PARAMETERS;
}
inline bool SystemEvent::Reader::hasApplyParameters() const {
  if (which() != SystemEvent::APPLY_PARAMETERS) return false;
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SystemEvent::Builder::hasApplyParameters() {
  if (which() != SystemEvent::APPLY_PARAMETERS) return false;
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SystemEvent::Reader::getApplyParameters() const {
  KJ_IREQUIRE(which() == SystemEvent::APPLY_PARAMETERS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SystemEvent::Builder::getApplyParameters() {
  KJ_IREQUIRE(which() == SystemEvent::APPLY_PARAMETERS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SystemEvent::Builder::setApplyParameters( ::capnp::Text::Reader value) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::APPLY_PARAMETERS);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SystemEvent::Builder::initApplyParameters(unsigned int size) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::APPLY_PARAMETERS);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void SystemEvent::Builder::adoptApplyParameters(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::APPLY_PARAMETERS);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SystemEvent::Builder::disownApplyParameters() {
  KJ_IREQUIRE(which() == SystemEvent::APPLY_PARAMETERS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool SystemEvent::Reader::isDescribeParameters() const {
  return which() == SystemEvent::DESCRIBE_PARAMETERS;
}
inline bool SystemEvent::Builder::isDescribeParameters() {
  return which() == SystemEvent::DESCRIBE_PARAMETERS;
}
inline  ::capnp::Void SystemEvent::Reader::getDescribeParameters() const {
  KJ_IREQUIRE(which() == SystemEvent::DESCRIBE_PARAMETERS,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void SystemEvent::Builder::getDescribeParameters() {
  KJ_IREQUIRE(which() == SystemEvent::DESCRIBE_PARAMETERS,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void SystemEvent::Builder::setDescribeParameters( ::capnp::Void value) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::DESCRIBE_PARAMETERS);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool SystemEvent::Reader::isParameters() const {
  return which() == SystemEvent::PARAMETERS;
}
inline bool SystemEvent::Builder::isParameters() {
  return which() == SystemEvent::PARAMETERS;
}
inline bool SystemEvent::Reader::hasParameters() const {
  if (which() != SystemEvent::PARAMETERS) return false;
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SystemEvent::Builder::hasParameters() {
  if (which() != SystemEvent::PARAMETERS) return false;
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SystemEvent::Reader::getParameters() const {
  KJ_IREQUIRE(which() == SystemEvent::PARAMETERS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SystemEvent::Builder::getParameters() {
  KJ_IREQUIRE(which() == SystemEvent::PARAMETERS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SystemEvent::Builder::setParameters( ::capnp::Text::Reader value) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::PARAMETERS);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SystemEvent::Builder::initParameters(unsigned int size) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::PARAMETERS);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void SystemEvent::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::PARAMETERS);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SystemEvent::Builder::disownParameters() {
  KJ_IREQUIRE(which() == SystemEvent::PARAMETERS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool SystemEvent::Reader::isDescribe() const {
  return which() == SystemEvent::DESCRIBE;
}
inline bool SystemEvent::Builder::isDescribe() {
  return which() == SystemEvent::DESCRIBE;
}
inline  ::capnp::Void SystemEvent::Reader::getDescribe() const {
  KJ_IREQUIRE(which() == SystemEvent::DESCRIBE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void SystemEvent::Builder::getDescribe() {
  KJ_IREQUIRE(which() == SystemEvent::DESCRIBE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void SystemEvent::Builder::setDescribe( ::capnp::Void value) {
  _builder.setDataField<SystemEvent::Which>(
      8 * ::capnp::ELEMENTS, SystemEvent::DESCRIBE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline StreamedBlock::Which StreamedBlock::Reader::which() const {
  return _reader.getDataField<Which>(8 * ::capnp::ELEMENTS);
}
inline StreamedBlock::Which StreamedBlock::Builder::which() {
  return _builder.getDataField<Which>(8 * ::capnp::ELEMENTS);
}

inline  ::uint64_t StreamedBlock::Reader::getCreated() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t StreamedBlock::Builder::getCreated() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void StreamedBlock::Builder::setCreated( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StreamedBlock::Reader::getReceived() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t StreamedBlock::Builder::getReceived() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void StreamedBlock::Builder::setReceived( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool StreamedBlock::Reader::isInt32() const {
  return which() == StreamedBlock::INT32;
}
inline bool StreamedBlock::Builder::isInt32() {
  return which() == StreamedBlock::INT32;
}
inline bool StreamedBlock::Reader::hasInt32() const {
  if (which() != StreamedBlock::INT32) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedBlock::Builder::hasInt32() {
  if (which() != StreamedBlock::INT32) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::DataBlockInt32::Reader StreamedBlock::Reader::getInt32() const {
  KJ_IREQUIRE(which() == StreamedBlock::INT32,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt32>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::DataBlockInt32::Builder StreamedBlock::Builder::getInt32() {
  KJ_IREQUIRE(which() == StreamedBlock::INT32,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt32>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::setInt32( ::Resonance::DataBlockInt32::Reader value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::INT32);
  ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt32>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::DataBlockInt32::Builder StreamedBlock::Builder::initInt32() {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::INT32);
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt32>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::adoptInt32(
    ::capnp::Orphan< ::Resonance::DataBlockInt32>&& value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::INT32);
  ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt32>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::DataBlockInt32> StreamedBlock::Builder::disownInt32() {
  KJ_IREQUIRE(which() == StreamedBlock::INT32,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt32>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamedBlock::Reader::isInt64() const {
  return which() == StreamedBlock::INT64;
}
inline bool StreamedBlock::Builder::isInt64() {
  return which() == StreamedBlock::INT64;
}
inline bool StreamedBlock::Reader::hasInt64() const {
  if (which() != StreamedBlock::INT64) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedBlock::Builder::hasInt64() {
  if (which() != StreamedBlock::INT64) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::DataBlockInt64::Reader StreamedBlock::Reader::getInt64() const {
  KJ_IREQUIRE(which() == StreamedBlock::INT64,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt64>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::DataBlockInt64::Builder StreamedBlock::Builder::getInt64() {
  KJ_IREQUIRE(which() == StreamedBlock::INT64,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt64>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::setInt64( ::Resonance::DataBlockInt64::Reader value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::INT64);
  ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt64>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::DataBlockInt64::Builder StreamedBlock::Builder::initInt64() {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::INT64);
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt64>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::adoptInt64(
    ::capnp::Orphan< ::Resonance::DataBlockInt64>&& value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::INT64);
  ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt64>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::DataBlockInt64> StreamedBlock::Builder::disownInt64() {
  KJ_IREQUIRE(which() == StreamedBlock::INT64,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockInt64>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamedBlock::Reader::isDouble() const {
  return which() == StreamedBlock::DOUBLE;
}
inline bool StreamedBlock::Builder::isDouble() {
  return which() == StreamedBlock::DOUBLE;
}
inline bool StreamedBlock::Reader::hasDouble() const {
  if (which() != StreamedBlock::DOUBLE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedBlock::Builder::hasDouble() {
  if (which() != StreamedBlock::DOUBLE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::DataBlockDouble::Reader StreamedBlock::Reader::getDouble() const {
  KJ_IREQUIRE(which() == StreamedBlock::DOUBLE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockDouble>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::DataBlockDouble::Builder StreamedBlock::Builder::getDouble() {
  KJ_IREQUIRE(which() == StreamedBlock::DOUBLE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockDouble>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::setDouble( ::Resonance::DataBlockDouble::Reader value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::DOUBLE);
  ::capnp::_::PointerHelpers< ::Resonance::DataBlockDouble>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::DataBlockDouble::Builder StreamedBlock::Builder::initDouble() {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::DOUBLE);
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockDouble>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::adoptDouble(
    ::capnp::Orphan< ::Resonance::DataBlockDouble>&& value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::DOUBLE);
  ::capnp::_::PointerHelpers< ::Resonance::DataBlockDouble>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::DataBlockDouble> StreamedBlock::Builder::disownDouble() {
  KJ_IREQUIRE(which() == StreamedBlock::DOUBLE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::DataBlockDouble>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamedBlock::Reader::isMessage() const {
  return which() == StreamedBlock::MESSAGE;
}
inline bool StreamedBlock::Builder::isMessage() {
  return which() == StreamedBlock::MESSAGE;
}
inline bool StreamedBlock::Reader::hasMessage() const {
  if (which() != StreamedBlock::MESSAGE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedBlock::Builder::hasMessage() {
  if (which() != StreamedBlock::MESSAGE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StreamedBlock::Reader::getMessage() const {
  KJ_IREQUIRE(which() == StreamedBlock::MESSAGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StreamedBlock::Builder::getMessage() {
  KJ_IREQUIRE(which() == StreamedBlock::MESSAGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::setMessage( ::capnp::Text::Reader value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StreamedBlock::Builder::initMessage(unsigned int size) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::MESSAGE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void StreamedBlock::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StreamedBlock::Builder::disownMessage() {
  KJ_IREQUIRE(which() == StreamedBlock::MESSAGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamedBlock::Reader::isBinary() const {
  return which() == StreamedBlock::BINARY;
}
inline bool StreamedBlock::Builder::isBinary() {
  return which() == StreamedBlock::BINARY;
}
inline bool StreamedBlock::Reader::hasBinary() const {
  if (which() != StreamedBlock::BINARY) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedBlock::Builder::hasBinary() {
  if (which() != StreamedBlock::BINARY) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader StreamedBlock::Reader::getBinary() const {
  KJ_IREQUIRE(which() == StreamedBlock::BINARY,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder StreamedBlock::Builder::getBinary() {
  KJ_IREQUIRE(which() == StreamedBlock::BINARY,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::setBinary( ::capnp::Data::Reader value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::BINARY);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder StreamedBlock::Builder::initBinary(unsigned int size) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::BINARY);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void StreamedBlock::Builder::adoptBinary(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::BINARY);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> StreamedBlock::Builder::disownBinary() {
  KJ_IREQUIRE(which() == StreamedBlock::BINARY,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamedBlock::Reader::isEventBus() const {
  return which() == StreamedBlock::EVENT_BUS;
}
inline bool StreamedBlock::Builder::isEventBus() {
  return which() == StreamedBlock::EVENT_BUS;
}
inline bool StreamedBlock::Reader::hasEventBus() const {
  if (which() != StreamedBlock::EVENT_BUS) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedBlock::Builder::hasEventBus() {
  if (which() != StreamedBlock::EVENT_BUS) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::SystemEvent::Reader StreamedBlock::Reader::getEventBus() const {
  KJ_IREQUIRE(which() == StreamedBlock::EVENT_BUS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::SystemEvent>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::SystemEvent::Builder StreamedBlock::Builder::getEventBus() {
  KJ_IREQUIRE(which() == StreamedBlock::EVENT_BUS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::SystemEvent>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::setEventBus( ::Resonance::SystemEvent::Reader value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::EVENT_BUS);
  ::capnp::_::PointerHelpers< ::Resonance::SystemEvent>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::SystemEvent::Builder StreamedBlock::Builder::initEventBus() {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::EVENT_BUS);
  return ::capnp::_::PointerHelpers< ::Resonance::SystemEvent>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedBlock::Builder::adoptEventBus(
    ::capnp::Orphan< ::Resonance::SystemEvent>&& value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::EVENT_BUS);
  ::capnp::_::PointerHelpers< ::Resonance::SystemEvent>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::SystemEvent> StreamedBlock::Builder::disownEventBus() {
  KJ_IREQUIRE(which() == StreamedBlock::EVENT_BUS,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::SystemEvent>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamedBlock::Reader::isError() const {
  return which() == StreamedBlock::ERROR;
}
inline bool StreamedBlock::Builder::isError() {
  return which() == StreamedBlock::ERROR;
}
inline  ::capnp::Void StreamedBlock::Reader::getError() const {
  KJ_IREQUIRE(which() == StreamedBlock::ERROR,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StreamedBlock::Builder::getError() {
  KJ_IREQUIRE(which() == StreamedBlock::ERROR,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void StreamedBlock::Builder::setError( ::capnp::Void value) {
  _builder.setDataField<StreamedBlock::Which>(
      8 * ::capnp::ELEMENTS, StreamedBlock::ERROR);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AtomicHeader::Reader::getChannels() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t AtomicHeader::Builder::getChannels() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void AtomicHeader::Builder::setChannels( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline double AtomicHeader::Reader::getSamplingRate() const {
  return _reader.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}

inline double AtomicHeader::Builder::getSamplingRate() {
  return _builder.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}
inline void AtomicHeader::Builder::setSamplingRate(double value) {
  _builder.setDataField<double>(
      1 * ::capnp::ELEMENTS, value);
}

inline StreamedHeader::Which StreamedHeader::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline StreamedHeader::Which StreamedHeader::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool StreamedHeader::Reader::isDouble() const {
  return which() == StreamedHeader::DOUBLE;
}
inline bool StreamedHeader::Builder::isDouble() {
  return which() == StreamedHeader::DOUBLE;
}
inline bool StreamedHeader::Reader::hasDouble() const {
  if (which() != StreamedHeader::DOUBLE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedHeader::Builder::hasDouble() {
  if (which() != StreamedHeader::DOUBLE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::AtomicHeader::Reader StreamedHeader::Reader::getDouble() const {
  KJ_IREQUIRE(which() == StreamedHeader::DOUBLE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::AtomicHeader::Builder StreamedHeader::Builder::getDouble() {
  KJ_IREQUIRE(which() == StreamedHeader::DOUBLE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedHeader::Builder::setDouble( ::Resonance::AtomicHeader::Reader value) {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::DOUBLE);
  ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::AtomicHeader::Builder StreamedHeader::Builder::initDouble() {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::DOUBLE);
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedHeader::Builder::adoptDouble(
    ::capnp::Orphan< ::Resonance::AtomicHeader>&& value) {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::DOUBLE);
  ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::AtomicHeader> StreamedHeader::Builder::disownDouble() {
  KJ_IREQUIRE(which() == StreamedHeader::DOUBLE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamedHeader::Reader::isInt32() const {
  return which() == StreamedHeader::INT32;
}
inline bool StreamedHeader::Builder::isInt32() {
  return which() == StreamedHeader::INT32;
}
inline bool StreamedHeader::Reader::hasInt32() const {
  if (which() != StreamedHeader::INT32) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedHeader::Builder::hasInt32() {
  if (which() != StreamedHeader::INT32) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::AtomicHeader::Reader StreamedHeader::Reader::getInt32() const {
  KJ_IREQUIRE(which() == StreamedHeader::INT32,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::AtomicHeader::Builder StreamedHeader::Builder::getInt32() {
  KJ_IREQUIRE(which() == StreamedHeader::INT32,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedHeader::Builder::setInt32( ::Resonance::AtomicHeader::Reader value) {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::INT32);
  ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::AtomicHeader::Builder StreamedHeader::Builder::initInt32() {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::INT32);
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedHeader::Builder::adoptInt32(
    ::capnp::Orphan< ::Resonance::AtomicHeader>&& value) {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::INT32);
  ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::AtomicHeader> StreamedHeader::Builder::disownInt32() {
  KJ_IREQUIRE(which() == StreamedHeader::INT32,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamedHeader::Reader::isInt64() const {
  return which() == StreamedHeader::INT64;
}
inline bool StreamedHeader::Builder::isInt64() {
  return which() == StreamedHeader::INT64;
}
inline bool StreamedHeader::Reader::hasInt64() const {
  if (which() != StreamedHeader::INT64) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedHeader::Builder::hasInt64() {
  if (which() != StreamedHeader::INT64) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::AtomicHeader::Reader StreamedHeader::Reader::getInt64() const {
  KJ_IREQUIRE(which() == StreamedHeader::INT64,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::AtomicHeader::Builder StreamedHeader::Builder::getInt64() {
  KJ_IREQUIRE(which() == StreamedHeader::INT64,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedHeader::Builder::setInt64( ::Resonance::AtomicHeader::Reader value) {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::INT64);
  ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::AtomicHeader::Builder StreamedHeader::Builder::initInt64() {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::INT64);
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedHeader::Builder::adoptInt64(
    ::capnp::Orphan< ::Resonance::AtomicHeader>&& value) {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::INT64);
  ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::AtomicHeader> StreamedHeader::Builder::disownInt64() {
  KJ_IREQUIRE(which() == StreamedHeader::INT64,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::AtomicHeader>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StreamedHeader::Reader::isMessage() const {
  return which() == StreamedHeader::MESSAGE;
}
inline bool StreamedHeader::Builder::isMessage() {
  return which() == StreamedHeader::MESSAGE;
}
inline  ::capnp::Void StreamedHeader::Reader::getMessage() const {
  KJ_IREQUIRE(which() == StreamedHeader::MESSAGE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StreamedHeader::Builder::getMessage() {
  KJ_IREQUIRE(which() == StreamedHeader::MESSAGE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void StreamedHeader::Builder::setMessage( ::capnp::Void value) {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::MESSAGE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool StreamedHeader::Reader::isBinary() const {
  return which() == StreamedHeader::BINARY;
}
inline bool StreamedHeader::Builder::isBinary() {
  return which() == StreamedHeader::BINARY;
}
inline  ::capnp::Void StreamedHeader::Reader::getBinary() const {
  KJ_IREQUIRE(which() == StreamedHeader::BINARY,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StreamedHeader::Builder::getBinary() {
  KJ_IREQUIRE(which() == StreamedHeader::BINARY,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void StreamedHeader::Builder::setBinary( ::capnp::Void value) {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::BINARY);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool StreamedHeader::Reader::isEventBus() const {
  return which() == StreamedHeader::EVENT_BUS;
}
inline bool StreamedHeader::Builder::isEventBus() {
  return which() == StreamedHeader::EVENT_BUS;
}
inline  ::capnp::Void StreamedHeader::Reader::getEventBus() const {
  KJ_IREQUIRE(which() == StreamedHeader::EVENT_BUS,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StreamedHeader::Builder::getEventBus() {
  KJ_IREQUIRE(which() == StreamedHeader::EVENT_BUS,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void StreamedHeader::Builder::setEventBus( ::capnp::Void value) {
  _builder.setDataField<StreamedHeader::Which>(
      0 * ::capnp::ELEMENTS, StreamedHeader::EVENT_BUS);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

}  // namespace

#endif  // CAPNP_INCLUDED_85e38f4662b50c44_
