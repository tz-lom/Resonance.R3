// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Messages.capnp

#ifndef CAPNP_INCLUDED_fca378434a129d99_
#define CAPNP_INCLUDED_fca378434a129d99_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Streamed.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a01a0ba90e801b35);
CAPNP_DECLARE_SCHEMA(f31dcf6b9187c096);
enum class BlockType_f31dcf6b9187c096: uint16_t {
  DOUBLE,
  INT32,
  MESSAGE,
  BINARY,
};
CAPNP_DECLARE_ENUM(BlockType, f31dcf6b9187c096);
CAPNP_DECLARE_SCHEMA(a4dd58f14867a4ce);
CAPNP_DECLARE_SCHEMA(81535e74c3cabf33);
CAPNP_DECLARE_SCHEMA(e7d05ea88a49a6f1);
CAPNP_DECLARE_SCHEMA(ab845c3cc34d0933);
CAPNP_DECLARE_SCHEMA(cec8c42a27d274d1);
CAPNP_DECLARE_SCHEMA(eef00d45a6c6a7e8);
CAPNP_DECLARE_SCHEMA(9f1a5685639fa0ff);
CAPNP_DECLARE_SCHEMA(c0dd4bc6972dcf68);
CAPNP_DECLARE_SCHEMA(921685f2e96b431e);

}  // namespace schemas
}  // namespace capnp

namespace Resonance {
namespace R2E {

struct FileHeader {
  FileHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a01a0ba90e801b35, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::BlockType_f31dcf6b9187c096 BlockType;

struct DataBlockDouble {
  DataBlockDouble() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4dd58f14867a4ce, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DataBlockInt32 {
  DataBlockInt32() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81535e74c3cabf33, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DataBlockMessage {
  DataBlockMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7d05ea88a49a6f1, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DataBlockBinary {
  DataBlockBinary() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab845c3cc34d0933, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct StreamDescriptor {
  StreamDescriptor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cec8c42a27d274d1, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct StreamedDataBlock {
  StreamedDataBlock() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eef00d45a6c6a7e8, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SystemLog {
  SystemLog() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f1a5685639fa0ff, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SystemConfig {
  SystemConfig() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0dd4bc6972dcf68, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct FileItem {
  FileItem() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    STREAM,
    DATA_BLOCK,
    LOG,
    CONFIG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(921685f2e96b431e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class FileHeader::Reader {
public:
  typedef FileHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVersion() const;

  inline  ::uint64_t getTimestamp() const;

  inline bool getPacked() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FileHeader::Builder {
public:
  typedef FileHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVersion();
  inline void setVersion( ::uint32_t value);

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool getPacked();
  inline void setPacked(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FileHeader::Pipeline {
public:
  typedef FileHeader Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DataBlockDouble::Reader {
public:
  typedef DataBlockDouble Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline  ::uint32_t getSamples() const;

  inline bool hasData() const;
  inline  ::capnp::List<double>::Reader getData() const;

  inline  ::uint64_t getReceived() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DataBlockDouble::Builder {
public:
  typedef DataBlockDouble Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline  ::uint32_t getSamples();
  inline void setSamples( ::uint32_t value);

  inline bool hasData();
  inline  ::capnp::List<double>::Builder getData();
  inline void setData( ::capnp::List<double>::Reader value);
  inline void setData(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownData();

  inline  ::uint64_t getReceived();
  inline void setReceived( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DataBlockDouble::Pipeline {
public:
  typedef DataBlockDouble Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DataBlockInt32::Reader {
public:
  typedef DataBlockInt32 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline  ::uint32_t getSamples() const;

  inline bool hasData() const;
  inline  ::capnp::List< ::int32_t>::Reader getData() const;

  inline  ::uint64_t getReceived() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DataBlockInt32::Builder {
public:
  typedef DataBlockInt32 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline  ::uint32_t getSamples();
  inline void setSamples( ::uint32_t value);

  inline bool hasData();
  inline  ::capnp::List< ::int32_t>::Builder getData();
  inline void setData( ::capnp::List< ::int32_t>::Reader value);
  inline void setData(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownData();

  inline  ::uint64_t getReceived();
  inline void setReceived( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DataBlockInt32::Pipeline {
public:
  typedef DataBlockInt32 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DataBlockMessage::Reader {
public:
  typedef DataBlockMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline bool hasData() const;
  inline  ::capnp::Text::Reader getData() const;

  inline  ::uint64_t getReceived() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DataBlockMessage::Builder {
public:
  typedef DataBlockMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasData();
  inline  ::capnp::Text::Builder getData();
  inline void setData( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownData();

  inline  ::uint64_t getReceived();
  inline void setReceived( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DataBlockMessage::Pipeline {
public:
  typedef DataBlockMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DataBlockBinary::Reader {
public:
  typedef DataBlockBinary Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline  ::uint64_t getReceived() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DataBlockBinary::Builder {
public:
  typedef DataBlockBinary Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline  ::uint64_t getReceived();
  inline void setReceived( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DataBlockBinary::Pipeline {
public:
  typedef DataBlockBinary Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StreamDescriptor::Reader {
public:
  typedef StreamDescriptor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId() const;

  inline  ::Resonance::R2E::BlockType getType() const;

  inline  ::uint32_t getChannels() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StreamDescriptor::Builder {
public:
  typedef StreamDescriptor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline  ::Resonance::R2E::BlockType getType();
  inline void setType( ::Resonance::R2E::BlockType value);

  inline  ::uint32_t getChannels();
  inline void setChannels( ::uint32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StreamDescriptor::Pipeline {
public:
  typedef StreamDescriptor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StreamedDataBlock::Reader {
public:
  typedef StreamedDataBlock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getStream() const;

  inline bool hasBlock() const;
  inline  ::Resonance::StreamedBlock::Reader getBlock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StreamedDataBlock::Builder {
public:
  typedef StreamedDataBlock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getStream();
  inline void setStream( ::uint32_t value);

  inline bool hasBlock();
  inline  ::Resonance::StreamedBlock::Builder getBlock();
  inline void setBlock( ::Resonance::StreamedBlock::Reader value);
  inline  ::Resonance::StreamedBlock::Builder initBlock();
  inline void adoptBlock(::capnp::Orphan< ::Resonance::StreamedBlock>&& value);
  inline ::capnp::Orphan< ::Resonance::StreamedBlock> disownBlock();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StreamedDataBlock::Pipeline {
public:
  typedef StreamedDataBlock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Resonance::StreamedBlock::Pipeline getBlock();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SystemLog::Reader {
public:
  typedef SystemLog Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline bool hasFrom() const;
  inline  ::capnp::Text::Reader getFrom() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SystemLog::Builder {
public:
  typedef SystemLog Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasFrom();
  inline  ::capnp::Text::Builder getFrom();
  inline void setFrom( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFrom(unsigned int size);
  inline void adoptFrom(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFrom();

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SystemLog::Pipeline {
public:
  typedef SystemLog Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SystemConfig::Reader {
public:
  typedef SystemConfig Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline bool hasConfig() const;
  inline  ::capnp::Text::Reader getConfig() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SystemConfig::Builder {
public:
  typedef SystemConfig Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasConfig();
  inline  ::capnp::Text::Builder getConfig();
  inline void setConfig( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initConfig(unsigned int size);
  inline void adoptConfig(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownConfig();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SystemConfig::Pipeline {
public:
  typedef SystemConfig Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FileItem::Reader {
public:
  typedef FileItem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isStream() const;
  inline bool hasStream() const;
  inline  ::Resonance::R2E::StreamDescriptor::Reader getStream() const;

  inline bool isDataBlock() const;
  inline bool hasDataBlock() const;
  inline  ::Resonance::R2E::StreamedDataBlock::Reader getDataBlock() const;

  inline bool isLog() const;
  inline bool hasLog() const;
  inline  ::Resonance::R2E::SystemLog::Reader getLog() const;

  inline bool isConfig() const;
  inline bool hasConfig() const;
  inline  ::Resonance::R2E::SystemConfig::Reader getConfig() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FileItem::Builder {
public:
  typedef FileItem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isStream();
  inline bool hasStream();
  inline  ::Resonance::R2E::StreamDescriptor::Builder getStream();
  inline void setStream( ::Resonance::R2E::StreamDescriptor::Reader value);
  inline  ::Resonance::R2E::StreamDescriptor::Builder initStream();
  inline void adoptStream(::capnp::Orphan< ::Resonance::R2E::StreamDescriptor>&& value);
  inline ::capnp::Orphan< ::Resonance::R2E::StreamDescriptor> disownStream();

  inline bool isDataBlock();
  inline bool hasDataBlock();
  inline  ::Resonance::R2E::StreamedDataBlock::Builder getDataBlock();
  inline void setDataBlock( ::Resonance::R2E::StreamedDataBlock::Reader value);
  inline  ::Resonance::R2E::StreamedDataBlock::Builder initDataBlock();
  inline void adoptDataBlock(::capnp::Orphan< ::Resonance::R2E::StreamedDataBlock>&& value);
  inline ::capnp::Orphan< ::Resonance::R2E::StreamedDataBlock> disownDataBlock();

  inline bool isLog();
  inline bool hasLog();
  inline  ::Resonance::R2E::SystemLog::Builder getLog();
  inline void setLog( ::Resonance::R2E::SystemLog::Reader value);
  inline  ::Resonance::R2E::SystemLog::Builder initLog();
  inline void adoptLog(::capnp::Orphan< ::Resonance::R2E::SystemLog>&& value);
  inline ::capnp::Orphan< ::Resonance::R2E::SystemLog> disownLog();

  inline bool isConfig();
  inline bool hasConfig();
  inline  ::Resonance::R2E::SystemConfig::Builder getConfig();
  inline void setConfig( ::Resonance::R2E::SystemConfig::Reader value);
  inline  ::Resonance::R2E::SystemConfig::Builder initConfig();
  inline void adoptConfig(::capnp::Orphan< ::Resonance::R2E::SystemConfig>&& value);
  inline ::capnp::Orphan< ::Resonance::R2E::SystemConfig> disownConfig();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FileItem::Pipeline {
public:
  typedef FileItem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t FileHeader::Reader::getVersion() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t FileHeader::Builder::getVersion() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void FileHeader::Builder::setVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FileHeader::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t FileHeader::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void FileHeader::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool FileHeader::Reader::getPacked() const {
  return _reader.getDataField<bool>(
      32 * ::capnp::ELEMENTS);
}

inline bool FileHeader::Builder::getPacked() {
  return _builder.getDataField<bool>(
      32 * ::capnp::ELEMENTS);
}
inline void FileHeader::Builder::setPacked(bool value) {
  _builder.setDataField<bool>(
      32 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DataBlockDouble::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t DataBlockDouble::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DataBlockDouble::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DataBlockDouble::Reader::getSamples() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t DataBlockDouble::Builder::getSamples() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void DataBlockDouble::Builder::setSamples( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool DataBlockDouble::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DataBlockDouble::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader DataBlockDouble::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder DataBlockDouble::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DataBlockDouble::Builder::setData( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void DataBlockDouble::Builder::setData(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder DataBlockDouble::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DataBlockDouble::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> DataBlockDouble::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t DataBlockDouble::Reader::getReceived() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t DataBlockDouble::Builder::getReceived() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void DataBlockDouble::Builder::setReceived( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DataBlockInt32::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t DataBlockInt32::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DataBlockInt32::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DataBlockInt32::Reader::getSamples() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t DataBlockInt32::Builder::getSamples() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void DataBlockInt32::Builder::setSamples( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool DataBlockInt32::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DataBlockInt32::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader DataBlockInt32::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder DataBlockInt32::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DataBlockInt32::Builder::setData( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void DataBlockInt32::Builder::setData(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder DataBlockInt32::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DataBlockInt32::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> DataBlockInt32::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t DataBlockInt32::Reader::getReceived() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t DataBlockInt32::Builder::getReceived() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void DataBlockInt32::Builder::setReceived( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DataBlockMessage::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t DataBlockMessage::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DataBlockMessage::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DataBlockMessage::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DataBlockMessage::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DataBlockMessage::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DataBlockMessage::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DataBlockMessage::Builder::setData( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DataBlockMessage::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DataBlockMessage::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DataBlockMessage::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t DataBlockMessage::Reader::getReceived() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t DataBlockMessage::Builder::getReceived() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void DataBlockMessage::Builder::setReceived( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DataBlockBinary::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t DataBlockBinary::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DataBlockBinary::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DataBlockBinary::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DataBlockBinary::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader DataBlockBinary::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder DataBlockBinary::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DataBlockBinary::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder DataBlockBinary::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DataBlockBinary::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> DataBlockBinary::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t DataBlockBinary::Reader::getReceived() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t DataBlockBinary::Builder::getReceived() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void DataBlockBinary::Builder::setReceived( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t StreamDescriptor::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t StreamDescriptor::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void StreamDescriptor::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::Resonance::R2E::BlockType StreamDescriptor::Reader::getType() const {
  return _reader.getDataField< ::Resonance::R2E::BlockType>(
      2 * ::capnp::ELEMENTS);
}

inline  ::Resonance::R2E::BlockType StreamDescriptor::Builder::getType() {
  return _builder.getDataField< ::Resonance::R2E::BlockType>(
      2 * ::capnp::ELEMENTS);
}
inline void StreamDescriptor::Builder::setType( ::Resonance::R2E::BlockType value) {
  _builder.setDataField< ::Resonance::R2E::BlockType>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t StreamDescriptor::Reader::getChannels() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t StreamDescriptor::Builder::getChannels() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void StreamDescriptor::Builder::setChannels( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool StreamDescriptor::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamDescriptor::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StreamDescriptor::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StreamDescriptor::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamDescriptor::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StreamDescriptor::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void StreamDescriptor::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StreamDescriptor::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t StreamedDataBlock::Reader::getStream() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t StreamedDataBlock::Builder::getStream() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void StreamedDataBlock::Builder::setStream( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool StreamedDataBlock::Reader::hasBlock() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StreamedDataBlock::Builder::hasBlock() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::StreamedBlock::Reader StreamedDataBlock::Reader::getBlock() const {
  return ::capnp::_::PointerHelpers< ::Resonance::StreamedBlock>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::StreamedBlock::Builder StreamedDataBlock::Builder::getBlock() {
  return ::capnp::_::PointerHelpers< ::Resonance::StreamedBlock>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Resonance::StreamedBlock::Pipeline StreamedDataBlock::Pipeline::getBlock() {
  return  ::Resonance::StreamedBlock::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void StreamedDataBlock::Builder::setBlock( ::Resonance::StreamedBlock::Reader value) {
  ::capnp::_::PointerHelpers< ::Resonance::StreamedBlock>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::StreamedBlock::Builder StreamedDataBlock::Builder::initBlock() {
  return ::capnp::_::PointerHelpers< ::Resonance::StreamedBlock>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StreamedDataBlock::Builder::adoptBlock(
    ::capnp::Orphan< ::Resonance::StreamedBlock>&& value) {
  ::capnp::_::PointerHelpers< ::Resonance::StreamedBlock>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::StreamedBlock> StreamedDataBlock::Builder::disownBlock() {
  return ::capnp::_::PointerHelpers< ::Resonance::StreamedBlock>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t SystemLog::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t SystemLog::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void SystemLog::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool SystemLog::Reader::hasFrom() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SystemLog::Builder::hasFrom() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SystemLog::Reader::getFrom() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SystemLog::Builder::getFrom() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SystemLog::Builder::setFrom( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SystemLog::Builder::initFrom(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SystemLog::Builder::adoptFrom(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SystemLog::Builder::disownFrom() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SystemLog::Reader::hasMessage() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SystemLog::Builder::hasMessage() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SystemLog::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SystemLog::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SystemLog::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SystemLog::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SystemLog::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SystemLog::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t SystemConfig::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t SystemConfig::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void SystemConfig::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool SystemConfig::Reader::hasConfig() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SystemConfig::Builder::hasConfig() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SystemConfig::Reader::getConfig() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SystemConfig::Builder::getConfig() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SystemConfig::Builder::setConfig( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SystemConfig::Builder::initConfig(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SystemConfig::Builder::adoptConfig(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SystemConfig::Builder::disownConfig() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline FileItem::Which FileItem::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline FileItem::Which FileItem::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool FileItem::Reader::isStream() const {
  return which() == FileItem::STREAM;
}
inline bool FileItem::Builder::isStream() {
  return which() == FileItem::STREAM;
}
inline bool FileItem::Reader::hasStream() const {
  if (which() != FileItem::STREAM) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool FileItem::Builder::hasStream() {
  if (which() != FileItem::STREAM) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::R2E::StreamDescriptor::Reader FileItem::Reader::getStream() const {
  KJ_IREQUIRE(which() == FileItem::STREAM,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamDescriptor>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::R2E::StreamDescriptor::Builder FileItem::Builder::getStream() {
  KJ_IREQUIRE(which() == FileItem::STREAM,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamDescriptor>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FileItem::Builder::setStream( ::Resonance::R2E::StreamDescriptor::Reader value) {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::STREAM);
  ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamDescriptor>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::R2E::StreamDescriptor::Builder FileItem::Builder::initStream() {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::STREAM);
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamDescriptor>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FileItem::Builder::adoptStream(
    ::capnp::Orphan< ::Resonance::R2E::StreamDescriptor>&& value) {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::STREAM);
  ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamDescriptor>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::R2E::StreamDescriptor> FileItem::Builder::disownStream() {
  KJ_IREQUIRE(which() == FileItem::STREAM,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamDescriptor>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool FileItem::Reader::isDataBlock() const {
  return which() == FileItem::DATA_BLOCK;
}
inline bool FileItem::Builder::isDataBlock() {
  return which() == FileItem::DATA_BLOCK;
}
inline bool FileItem::Reader::hasDataBlock() const {
  if (which() != FileItem::DATA_BLOCK) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool FileItem::Builder::hasDataBlock() {
  if (which() != FileItem::DATA_BLOCK) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::R2E::StreamedDataBlock::Reader FileItem::Reader::getDataBlock() const {
  KJ_IREQUIRE(which() == FileItem::DATA_BLOCK,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamedDataBlock>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::R2E::StreamedDataBlock::Builder FileItem::Builder::getDataBlock() {
  KJ_IREQUIRE(which() == FileItem::DATA_BLOCK,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamedDataBlock>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FileItem::Builder::setDataBlock( ::Resonance::R2E::StreamedDataBlock::Reader value) {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::DATA_BLOCK);
  ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamedDataBlock>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::R2E::StreamedDataBlock::Builder FileItem::Builder::initDataBlock() {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::DATA_BLOCK);
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamedDataBlock>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FileItem::Builder::adoptDataBlock(
    ::capnp::Orphan< ::Resonance::R2E::StreamedDataBlock>&& value) {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::DATA_BLOCK);
  ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamedDataBlock>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::R2E::StreamedDataBlock> FileItem::Builder::disownDataBlock() {
  KJ_IREQUIRE(which() == FileItem::DATA_BLOCK,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::StreamedDataBlock>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool FileItem::Reader::isLog() const {
  return which() == FileItem::LOG;
}
inline bool FileItem::Builder::isLog() {
  return which() == FileItem::LOG;
}
inline bool FileItem::Reader::hasLog() const {
  if (which() != FileItem::LOG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool FileItem::Builder::hasLog() {
  if (which() != FileItem::LOG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::R2E::SystemLog::Reader FileItem::Reader::getLog() const {
  KJ_IREQUIRE(which() == FileItem::LOG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemLog>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::R2E::SystemLog::Builder FileItem::Builder::getLog() {
  KJ_IREQUIRE(which() == FileItem::LOG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemLog>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FileItem::Builder::setLog( ::Resonance::R2E::SystemLog::Reader value) {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::LOG);
  ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemLog>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::R2E::SystemLog::Builder FileItem::Builder::initLog() {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::LOG);
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemLog>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FileItem::Builder::adoptLog(
    ::capnp::Orphan< ::Resonance::R2E::SystemLog>&& value) {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::LOG);
  ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemLog>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::R2E::SystemLog> FileItem::Builder::disownLog() {
  KJ_IREQUIRE(which() == FileItem::LOG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemLog>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool FileItem::Reader::isConfig() const {
  return which() == FileItem::CONFIG;
}
inline bool FileItem::Builder::isConfig() {
  return which() == FileItem::CONFIG;
}
inline bool FileItem::Reader::hasConfig() const {
  if (which() != FileItem::CONFIG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool FileItem::Builder::hasConfig() {
  if (which() != FileItem::CONFIG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Resonance::R2E::SystemConfig::Reader FileItem::Reader::getConfig() const {
  KJ_IREQUIRE(which() == FileItem::CONFIG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemConfig>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Resonance::R2E::SystemConfig::Builder FileItem::Builder::getConfig() {
  KJ_IREQUIRE(which() == FileItem::CONFIG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemConfig>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FileItem::Builder::setConfig( ::Resonance::R2E::SystemConfig::Reader value) {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::CONFIG);
  ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemConfig>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Resonance::R2E::SystemConfig::Builder FileItem::Builder::initConfig() {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::CONFIG);
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemConfig>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FileItem::Builder::adoptConfig(
    ::capnp::Orphan< ::Resonance::R2E::SystemConfig>&& value) {
  _builder.setDataField<FileItem::Which>(
      0 * ::capnp::ELEMENTS, FileItem::CONFIG);
  ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemConfig>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Resonance::R2E::SystemConfig> FileItem::Builder::disownConfig() {
  KJ_IREQUIRE(which() == FileItem::CONFIG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Resonance::R2E::SystemConfig>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_fca378434a129d99_
